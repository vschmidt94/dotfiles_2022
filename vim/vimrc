"---------------------------------------------------------------------
" Vim Configuration File
" V. Schmidt
"
" Credit to many other config files that I've stolen bits and pieces
" from.
"
" Sections:
"  - General
"  - Vim User Interfacea
"  - Appearance
"  - Searching
"  - Text, tab, and indents
"  - Moving Around
"  - Visual Mode Related
"  - File Handling
"  - Plugins
"  		- Airline
"       - Auto-Save
"  		- Ctrl-P
"  		- NERDTree
"  		- Tagbar
"  		- VimWiki
"  		- YouCompleteMe
"---------------------------------------------------------------------
"
"---------------------------------------------------------------------
" => General
"---------------------------------------------------------------------

" Set shell if on windows box:
if has("win32")
    set shell=cmd.exe
endif

"  Plugins - using vim-plug to managee
call plug#begin('~/vimfiles/plugged')
Plug 'tpope/vim-fugitive'
Plug 'kien/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'ryanoasis/vim-devicons'
Plug 'vimwiki/vimwiki'
Plug 'itchyny/lightline.vim'
Plug 'taohexxx/lightline-buffer'
Plug 'vim-scripts/vim-auto-save'
Plug 'morhetz/gruvbox'
Plug 'https://github.com/junegunn/seoul256.vim'
Plug 'https://github.com/edkolev/promptline.vim.git'
call plug#end()

" Leader keys
let mapleader="\<Space>"
let maplocalleader="\<cr>"

" How may lines to remember
set history=500

" In many terminal emulators the mouse works.
if has('mouse')
  set mouse=a
endif

"---------------------------------------------------------------------
" => Vim User Interface
"---------------------------------------------------------------------

" Configure backspace key to work as expected
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Height of command bar
set cmdheight=2

" Display line numbers
set relativenumber
set number

" Add a little margin to the left (1 column)
set foldcolumn=1

" Open split on right
set splitright

" Always show current position
set ruler

" Set scroll offset - prevents cursor going all the way to top or bottom
set so=7

" un-highlight with double escape
nnoremap <esc> :nohlsearch<cr>:<esc>

" No annoying sound on errors
set noerrorbells visualbell t_vb=

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

"---------------------------------------------------------------------
" => Restore window position
"---------------------------------------------------------------------
" List of buffers and waits on number to switch to.
map <leader>bb :ls<CR>:b<Space>
if has("gui_running")
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction

  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif

" To enable the saving and restoring of screen positions.
let g:screen_size_restore_pos = 1

" To save and restore screen for each Vim instance.
" This is useful if you routinely run more than one Vim instance.
" For all Vim to use the same settings, change this to 0.
let g:screen_size_by_vim_instance = 0

"---------------------------------------------------------------------
" => Appearance
"---------------------------------------------------------------------

" Open full screen if GUI
if has("gui_running")
  " GUI is running or is about to start.
  " Maximize gvim window (for an alternative on Windows, see simalt below).
  set lines=999 columns=999
else
  " This is console Vim.
  if exists("+lines")
    set lines=50
  endif
  if exists("+columns")
    set columns=100
  endif
endif

" Enable Syntax Highlighting
syntax on

" Colorscheme
try
  colorscheme gruvbox
  set background=dark
  "colorscheme seoul256
  let g:seoul256_background=234
catch
endtry

let g:gruvbox_italicize_comments=0
let g:gruvbox_bold=0

" Use 256 color terminal color table
set t_Co=256

" Vertical lines - set up for Garmin code conventions
" set colorcolumn=61,81,93,110
" highlight ColorColumn guibg=grey22

" Show matching brackets when text indicator is over them
set showmatch
set mat=3 " tenths of second to show matching bracket blink

"---------------------------------------------------------------------
" => Searching
"---------------------------------------------------------------------

" Searching:
set ignorecase
set smartcase
set incsearch  " incremental search
set hlsearch   " highlight results

" Search program - use ripgrep if exists
if executable('rg')
  set grepprg=rg\ --vimgrep\ --mmap\ --ignore-file\ ~/.gitignore_global
endif

" quickfix window location bottom
:autocmd FileType qf wincmd J

" <leader>g to start a grep search
command -nargs=+ -complete=file -bar Rg silent! grep! <args>|cwindow|redraw!
nnoremap <leader>g :Rg<SPACE>

" Bind localleader + f to search word under cursor.
" mnenomic 'find'
nnoremap <localleader>f :grep! "\b<C-r><C-W>\b"<cr>:cw<cr>

"---------------------------------------------------------------------
" => Terminal
"---------------------------------------------------------------------
" tnoremap <ESC> <C-w>:q!<CR>

"---------------------------------------------------------------------
" => Text, tab and indent related
"---------------------------------------------------------------------

" Use spaces instead of tabs
set expandtab
set smarttab

" Use spaces instead of tabs
set expandtab
set smarttab

" Set textwidth to 120 except for git commit files
set tw=120
au FileType gitcommit set tw=72

" Linebreak after word, not mid-word
set linebreak

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Auto-Indent
set ai

" Smart indent
set si

" Wrap Lines
set wrap

"---------------------------------------------------------------------
" => Moving Around
"---------------------------------------------------------------------

" Disable arrow keys because they are a crutch
nnoremap <Left> <nop>
nnoremap <Up> <nop>
nnoremap <Right> <nop>
nnoremap <Down> <nop>

" Disable the arrow keys in insert mode as well
inoremap <Left> <nop>
inoremap <Up> <nop>
inoremap <Right> <nop>
inoremap <Down> <nop>

" Easier split navigation
nnoremap <leader>j <C-W><C-j>
nnoremap <leader>k <C-W><C-k>
nnoremap <leader>l <C-W><C-l>
nnoremap <leader>h <C-W><C-h>

" Swap windows around using a similar motion as navigating, just hold shift
" during key command
nnoremap <leader>J <C-W><S-j>
nnoremap <leader>K <C-W><S-k>
nnoremap <leader>L <C-W><S-l>
nnoremap <leader>H <C-W><S-h>


"---------------------------------------------------------------------
" => Visual mode related
"---------------------------------------------------------------------

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('b', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

"---------------------------------------------------------------------
" => File handling
"---------------------------------------------------------------------

" Encoding
set encoding=utf8

" Wildignore - file pattern Vim should ignore during file or
" directory name completions
set wildignore+=*/.git/*,*/tmp/*,*.swp

" Enable filetype plugins
filetype plugin on
filetype plugin indent on

" Turn backup off, since most stuff is in git.
set nobackup
set nowb
set noswapfile

" Set to auto read when a file is changed from the outside
set autoread

" Set autowrite for automatically saving the file when
" transitioning
set autowrite

" Remember info about open buffers on close
set viminfo^=%

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Delete trailing white space on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd FileType c,cpp,py autocmd BufWritePre :call DeleteTrailingWS()

"---------------------------------------------------------------------
" => Plugin: Auto-Save
"---------------------------------------------------------------------
let g:auto_save_in_insert_mode=0
let g:auto_save=1

"---------------------------------------------------------------------
" => Plugin: Ctrl-P
"---------------------------------------------------------------------

" Use ripgrep for Ctrl-P
if executable('rg')
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif

" Remap CTRL-P to be easier to open with leader-f
let g:ctrlp_map = '<leader>f'

" I just want to open by file name so ignore path matching
let g:ctrlp_by_filename = 1

" Ignore binaries
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|sbas)$',
    \ 'file': '\v\.(lnk|ucfg|sln|o32|o|via|exe|so|dll|bmp|obj|rsp|oxml|sbmp|lib|pyc)$',
    \ }

" For G2xxx with all the submodules the 'r' option
" locks your searches down in your local submodule
" so just use 'a' so we can see all files from where
" vim was started.
let g:ctrlp_working_path_mode = 'a'

"---------------------------------------------------------------------
" => Plugin: Garmin
"---------------------------------------------------------------------
let g:garmin_requiem_exe = 'c:/prism/tools-bin-vc.aviation.garmin.com/requiem/trunk/requiem.exe'
let garmin_bjam_split = 'vertical'
let g:garmin_snips_style = 'verbose'
let g:garmin_header_comment_width = 80

"---------------------------------------------------------------------
" => Plugin: Lightline
"---------------------------------------------------------------------
set laststatus=2
let g:lightline = {
  \   'colorscheme': 'wombat',
  \   'active': {
  \     'left':[ [ 'mode', 'paste' ],
  \              [ 'gitbranch', 'readonly', 'filename', 'modified' ]
  \     ]
  \   },
  \ 'tabline': {
  \   'left': [ [ 'bufferinfo' ],
  \             [ 'separator' ],
  \             [ 'bufferbefore', 'buffercurrent', 'bufferafter' ], ],
  \   'right': [ [ 'close' ], ],
  \ },
  \ 'component': {
  \   'lineinfo': ' %3l:%-2v',
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head',
  \   'bufferinfo': 'lightline#buffer#bufferinfo',
  \ },
  \ 'component_expand': {
  \   'buffercurrent': 'lightline#buffer#buffercurrent',
  \   'bufferbefore': 'lightline#buffer#bufferbefore',
  \   'bufferafter': 'lightline#buffer#bufferafter',
  \ },
  \ 'component_type': {
  \   'buffercurrent': 'tabsel',
  \   'bufferbefore': 'raw',
  \   'bufferafter': 'raw',
  \ },
  \ }

let g:lightline.separator = {
	\   'left': '', 'right': ''
  \}
let g:lightline.subseparator = {
	\   'left': '', 'right': ''
  \}
" remap arrow keys
nnoremap <Left> :bprev<CR>
nnoremap <Right> :bnext<CR>

" lightline-buffer ui settings
" replace these symbols with ascii characters if your environment does not support unicode
let g:lightline_buffer_logo = ' '
let g:lightline_buffer_readonly_icon = ''
let g:lightline_buffer_modified_icon = '✭'
let g:lightline_buffer_git_icon = ' '
let g:lightline_buffer_ellipsis_icon = '..'
let g:lightline_buffer_expand_left_icon = '◀ '
let g:lightline_buffer_expand_right_icon = ' ▶'
let g:lightline_buffer_active_buffer_left_icon = ''
let g:lightline_buffer_active_buffer_right_icon = ''
" let g:lightline_buffer_separator_icon = '  '

" enable devicons, only support utf-8
" require <https://github.com/ryanoasis/vim-devicons>
let g:lightline_buffer_enable_devicons = 1

" lightline-buffer function settings
let g:lightline_buffer_show_bufnr = 1

" :help filename-modifiers
let g:lightline_buffer_fname_mod = ':t'

" hide buffer list
let g:lightline_buffer_excludes = ['vimfiler']

" max file name length
let g:lightline_buffer_maxflen = 30

" max file extension length
let g:lightline_buffer_maxfextlen = 3

" min file name length
let g:lightline_buffer_minflen = 16

" min file extension length
let g:lightline_buffer_minfextlen = 3

" reserve length for other component (e.g. info, close)
let g:lightline_buffer_reservelen = 20

set showtabline=2  " Show tabline
set guioptions-=e  " Don't use GUI tabline

"---------------------------------------------------------------------
" => Plugin: NERDTree
"---------------------------------------------------------------------

"---------------------------------------------------------------------
" => Plugin: Tagbar
"---------------------------------------------------------------------

" F12 to rebuild the tags file
nnoremap <f12> :!start /min ctags -R --fields=+liaS --c-kinds=+px --c++-kinds=+p --extra=+q --languages=c,c++ --excmd=n . <cr>

"Use leader t to show the tagbar
nmap <F8> :TagbarToggle<CR>
nnoremap <leader>t :TagbarOpenAutoClose<CR>

"override the order of displayed info for my
"preferences
let g:tagbar_type_c = {
    \ 'kinds' : [
        \ 'f:functions:0:1',
        \ 'd:macros:0:0',
        \ 'g:enums',
        \ 'e:enumerators:0:0',
        \ 't:typedefs:0:0',
        \ 's:structs',
        \ 'u:unions',
        \ 'm:members:0:0',
        \ 'v:variables:0:0',
    \ ],
\ }

let g:tagbar_type_cpp = {
    \ 'kinds' : [
        \ 'f:functions:0:1',
        \ 'd:macros:0:0',
        \ 'g:enums',
        \ 'e:enumerators:0:0',
        \ 't:typedefs:0:0',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'm:members:0:0',
        \ 'v:variables:0:0',
    \ ],
\ }

let g:tagbar_type_jam = {
    \ 'ctagstype' : 'jam',
    \ 'kinds'     : [
        \ 'r:rules',
        \ 'v:variables'
    \ ],
\ }


"---------------------------------------------------------------------
" => Plugin: Vimwiki
"---------------------------------------------------------------------

" Run multiple wikis if desired
let g:vimwiki_list = [
                        \{'path': '~/git/personal/vimwiki/intel/vs_intel.wiki',
                        \ 'syntax': 'markdown',
                        \ 'ext': '.md'},
                        \{'path': '~/git/personal/vimwiki/personal/vs_personal.wiki',
                        \ 'syntax': 'markdown',
                        \ 'ext': '.md'}
                    \]
au BufRead,BufNewFile *.wiki set filetype=vimwiki
" :autocmd FileType vimwiki map d :VimwikiMakeDiaryNote

"---------------------------------------------------------------------
" => Plugin: YouCompleteMe
"---------------------------------------------------------------------

" From Nick's vimrc:
"I was having problems with it erroring out on
"vim scripts when editing so this just tells it
"to work on c files
let g:ycm_filetype_whitelist= {'c': 1, 'python': 1, 'cpp': 1}
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/vimfiles/clangflags.py'
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_goto_buffer_command = 'vertical-split'

nnoremap <localleader>] :YcmCompleter GoToImprecise<CR>
nnoremap <localleader>t :YcmCompleter GetType<CR>
nnoremap <leader>q :YcmCompleter FixIt<CR>
function! SaveWithYCM()
    let curr = bufnr("%")
    let last = bufnr("$")

    if curr > 1    | silent! execute "1,".(curr-1)."bd"     | endif
    if curr < last | silent! execute (curr+1).",".last."bd" | endif
w!
endfunction
command! W call SaveWithYCM()

Plug 'kien/ctrlp.vim'

